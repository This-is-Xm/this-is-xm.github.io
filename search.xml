<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>新年快乐</title>
    <url>/2022/01/20/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<hr>
<p>摘要</p>
<span id="more"></span>
<p>来一个长——————————长————————————的分割线</p>
<p>徐墨：哎嘿嘿，代码来咯， 哎，这这，这代码都齐了，怎么还不用啊?<br>A：老徐，大伙都不敢用，有人说，说是操作太复杂了<br>徐墨：哎呦呦，你这人就爱开玩笑，快趁热用吧，我不打扰，我走了<br>B:你不能走<br>徐墨：0.0<br>徐墨：tnnd，为什么不用！不用是吧，好———————————那我打个包给你们吧QAQ</p>
<p>以下是打包文件链接(环境我内置好了，点击exe文件可以直接用，无需下载python)：<br>链接: <a href="https://pan.baidu.com/s/1TYxhUgQP-C9tnAHzMwm9tg?pwd=hucu">https://pan.baidu.com/s/1TYxhUgQP-C9tnAHzMwm9tg?pwd=hucu</a> 提取码: hucu</p>
]]></content>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>测试页</title>
    <url>/2021/12/23/%E6%B5%8B%E8%AF%95%E9%A1%B5/</url>
    <content><![CDATA[<hr>
<p>摘要</p>
<span id="more"></span>
<p>来个动态链表的个人理解好了。\n</p>
<p>#define _CRT_SECURE_NO_WARNINGS 1<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;string.h&gt;<br>struct student<br>{<br>    int num;<br>    int grade;<br>    struct student* next;<br>};<br>struct student* creat()<br>{<br>    int n;<br>    struct student* head;//首先，做一个头文件。<br>    struct student* p1, * p2;//然后，做两个连接工具<br>    n = 0;<br>    p1 = p2 = (struct student*)malloc(sizeof(struct student));//结构体自身不占空间，所以需要开空间，p1p2同时指向head结构体<br>    printf(“以学生&quot;学号，成绩&quot;格式输入（0为结束）：\n”);<br>    scanf(“ % ld, % f”, &amp;p1-&gt;num, &amp;p1-&gt;grade);//输入，储存<br>    head = NULL;//头文件初始化<br>    while (p1-&gt;num != 0)//开始创建结构体（head结构体已经存在了，所以从p1开始，是第二个结构体）<br>    {<br>        n = n + 1;<br>        if (n == 1)<br>            head = p1;//第二个创建的结构体与头文件结构体链接<br>        else<br>            p2-&gt;next = p1;//第三个及以上，p1的首地址赋予给了p2所在的结构体中的next，所以该结构体读取next时等同于读取此时p1的结构体地址<br>        p2 = p1;//此时p2位于p1相同的结构体（其实就是p2往后指了一个结构体）<br>        p1 = (struct student*)malloc(sizeof(struct student));//然后p1再创建个新的结构体，并且指向它，这样就又可以执行p2-&gt;next = p1<br>        scanf(“%d,%d”,&amp;p1-&gt;num, &amp;p1-&gt;grade);<br>    }<br>    p2 -&gt; next = NULL;//最后一个结构体指向NULL代表结束<br>    return head;//返回head结构体首地址，这样输出就可以从head开始一直往后延续。<br>}<br>void putout(struct student* head)//输出<br>{<br>    struct student* p,<em>p1;//每个自定义函数都是独立的，这和创建里的p1不同噢。<br>    p1 = (head);<br>    p = p1-&gt;next;//由于头文件只是充当开始的结构体，内容都是随机数，所以输出时把它跳过，从第二个有数值的结构体开始输出<br>    int n = 0;//这个主要是统计学生个数的，可有可无<br>    printf(“\n”);<br>    if (head != NULL)<br>    {<br>        do {<br>            printf(“编号：%d,成绩：%d\n”, p-&gt;num, p-&gt;grade);<br>            p = p-&gt;next;//指针p不断后移，输出，后移，输出，直到结构体全部输出完<br>            n++;<br>        } while (p != NULL);<br>    }<br>    else<br>        return(head);<br>    printf(“\n现在有%d个学生信息”, n);<br>}<br>int main()<br>{<br>    struct student</em> p;//声明一个结构体指针来存放创建函数里出来的head结构体首地址<br>    p =  creat();<br>    putout(p);//然后放进输出函数让它打印出来<br>    free(p);//释放，省点空间，可有可无。<br>    system(“pause”);//暂停，防止系统崩溃，可有可无。<br>}</p>
]]></content>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵线性变换理解</title>
    <url>/2022/02/12/%E7%9F%A9%E9%98%B5%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>备忘录：<br>首先线性变换的特点为：1.原点不发生变化 2.变化后直线（除了直观的横坐标和纵坐标，斜线如对角线也包括在内）<br>线性变化个人理解为二维空间上对空间的变化，具体表现在向量的拉伸和方向的改变，“变化”，是暗示空间上的动态变化<br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/bianhua1.PNG"><br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/bianhua2.PNG"><br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/bianhua3.PNG"><br>然后，我们要如何捕获到变化后某个向量的位置，或者说，一个向量在线性变化后，应该如何表示。<br>这个时候我们就用上了基向量，即i(1,0)和j(0,1)。我们知道，在变化前二维向量中，他们的拉伸可以表示该平面内任何一个向量{比如有向量a =（-1.2）=   (-1)j【反方向拉伸原长度】+ 2i【把i拉长为原来两倍】}，也可以说，每个向量与基向量都有相关性<br>再换个角度看，（2，-1）其实是基到向量a的一种方法，在线性变量时，这个方法仍旧没变。这时给你一个2x2的矩阵，比如[1，-2，3，0]，实际是记录变化后的两个基向量i（1，-2）和j（3，0），向量a现在在哪？<br>a= [-1*  1 +2*3] = [5]   那么a在变化后的向量表示为(5,2)<br>   [3 <em>(-2)+3</em>0] = [2]<br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E5%8F%98%E5%8C%96.PNG"><br>现在，来普遍化！<br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E7%BB%93%E8%AE%BA.PNG"><br>补充一个特殊变化：如果i和j在线性变化后两者有线性关系（倍数关系），如(2,1)和（-2，-1），相当于把空间压缩成一条线（降维）<br>总结：线性变化是一种操纵空间的手段，矩阵可以被看作空间变换的语言，你可以从一个已知矩阵，得出一个被变形后的空间，是空间的一种特定变换</p>
<p>好，以上还只是变一下，如果是变好几下呢，先把空间顺时针转九十度，再向右转四十五度（斜切）呢?这种称为“复合变换”。举个例子，一般的写法是这个样子（注，空间变化是从右往左看）<br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E5%A4%8D%E5%90%881.PNG"><br>这只是两个的，看起来就挺头疼是不是？按照前面对线性变化的理解，左侧的式子可以理解为：基向量ij分别变形（5，7）和（3，-3）在这个状态下，再变形到（-3，2）和（1，5），相乘得到的矩阵即复合变化（两次变化执行完）后结果<br>再细分，（5，7）经过（-3，1，2，5）的线性变化，即5<em>（-3，2）  +  7（1，5）。（3，-3）经过（-3，1，2，5）的线性变化。即3</em>（-3，1）+（-3）*（2，5）。这里不懂可以看看上文的向量a是怎么求的。<br>以此类推，变三次，四次。。。。都能变成一个复合变换，这样理解矩阵乘法是不是好记一些呢。<br>以这个可以来理解两个特性1.在两个不同的矩阵A和B时，AB≠BA，因为变化的先后不同。 2.（AB）C=A(BC)，因为变化还是从右往左，即C-&gt;B-&gt;A。<br>三维的同样可以类推<img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E5%A4%8D%E5%90%882.PNG"><br>摘自up主婆婆町<br>加油!</p>
]]></content>
      <tags>
        <tag>代数</tag>
      </tags>
  </entry>
  <entry>
    <title>线性变换理解逆矩阵，列空间，秩与零空间</title>
    <url>/2022/02/14/%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%90%86%E8%A7%A3%E9%80%86%E7%9F%A9%E9%98%B5%EF%BC%8C%E5%88%97%E7%A9%BA%E9%97%B4%EF%BC%8C%E7%A7%A9%E4%B8%8E%E9%9B%B6%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>备忘录:此文重于理解不重于计算，举例具有特殊性，让我们挨个来看看。<br>在此之前我们谈一谈某些特殊的方程组;所有的未知量只有常系数，未知数之间只有加和，举个例子，<br>2x+5y+3z=-3，         2     5     3   -3<br>4x+0y+8z= 0,——-&gt;x 4 + y 0 + z 8 =  0<br>1x+3y+0z= 2,          1     3     0    2<br>看起来像什么？————没错,一个3x3的矩阵！<img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%80%86%E8%BF%90%E7%AE%97.PNG"><br>按照线性变化来看，有向量a（x,y,z）经过矩阵的变换之后变成了向量（-3，0，2）<br>那么我们该怎么求向量a原来的位置呢，就得用上逆矩阵了，顾名思义，它是矩阵的倒推，从线性变换理解，一个矩阵表达的变化是空间顺时针旋转九十度，逆矩阵便是空间逆时针旋转九十度，哎给它整回原来的样子。<br>我们这里用A来表示矩阵，（A）-1表示逆矩阵，这里的-1是负一次幂的意思，即（4）-1=¼ 这个意思，结果为b，有公式A<em>a=b,因为A</em>(A)-1结果为什么都没变，所以(A)-1<em>A</em>A=b*(A)-1,即a=b*(A)-1,用中文来讲就是结果b乘逆矩阵得出向量a。<br>以上为det≠0的情况，要是det=0如何呢，我们知道，当det为0时，这个矩阵发生了降维，体被压缩成面/线/点，以上的公式就不能成立了，为什么呢？<br>想像你的手上有一个正方体a，好，现在你把它拉长成长方体b，无论你是怎么拉的，你把他搓成球再拉长成为长方体b了，你翻个面再拉长成长方体b了，无论你怎么做，都可以归纳成一个复合变换，正方体a–&gt;长方体b，逆矩阵可以很好的得出来，长方体b–&gt;正方体a<br>但是如果你”啪”的一下给它拍扁了，你让这个面复原成一个体。。。正方体a–&gt;长方体b方式很多，但是两端固定（长方体b，正方体a形状特定）很好复原，而正方体a–&gt;面，所有的体都可以成为面，体a，c,d,e,f都能成为面，面也就能复原出体c,d,e,f,没有指定的逆矩阵，能够还原出特定的体a，逆矩阵无法得出，公式自然无法用了。面到线，线到点类推。<br>虽然得不出逆矩阵，但是我们可以判断是否有解。比如变换让体成为了一个面，公式Ax=v(矩阵A，原向量x，变化后向量v)，如果很巧的是x变换后的v正好在在这个面上，此时有解，否则无解。如果变换的更夸张，体成为了一条线，那有解的可能性就更为严苛些，需要x变换后的v正好在这条线上。<br>我们有新的特定术语来描述维度：  秩。 一条线（一维）的秩为1，一个面（二维）的秩为2，一个体（三维）的秩为3。可以降维但不可逆，变换后如果和原来状态的秩相等，则称为“满秩”。不管是一条线，一个面还是三维空间，所有可能变换的结果的集合，都被称为矩阵的列空间。即矩阵（线性变换）所能涵盖的全部位置。<br>注意，零向量一定存在列空间中，在线性变换后，如果满秩状态下，只有零向量还处于原点的位置（线性变换原点不变），但是在非满秩的情况下，还有一部分向量会被压缩进原点，这些向量的集合被称为“零空间”或者“核”。以下是二维转一维的例子。<br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%9B%B6%E7%A9%BA%E9%97%B41.PNG"><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%9B%B6%E7%A9%BA%E9%97%B42.PNG"><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%9B%B6%E7%A9%BA%E9%97%B43.PNG"><br>如此再进一步，此时当Ax=v中的v=（0，0）时，表示的就是所有向量变换为零向量的集合，即零空间。<br>摘自up主婆婆町<br>加油！</p>
]]></content>
      <tags>
        <tag>代数</tag>
      </tags>
  </entry>
  <entry>
    <title>非方阵及不同维线性转换</title>
    <url>/2022/02/17/%E9%9D%9E%E6%96%B9%E9%98%B5%E5%8F%8A%E4%B8%8D%E5%90%8C%E7%BB%B4%E7%BA%BF%E6%80%A7%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>备忘录;之前都是n<em>n的标准方阵，这次看一看非方阵的理解。<br>其实只是进行一个补充，理解并不困难，例如3（行）</em>2（列）的方阵，3行，说明线性变化后需要三个基向量来表示位置，但是这个方阵只有两列，即两个基向量受到线性变化，那么说明它本身只有两个向量表示，即二维平面，但是，它被放到了三维的空间当中，这没有什么问题。<br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%9D%9E%E6%96%B9%E9%98%B51.PNG"><br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%9D%9E%E6%96%B9%E9%98%B52.PNG"><br>另外一种，比如2（行）<em>3（列）的方阵，2行，说明线性变化后需要两个基向量表示，3列，即三个基向量受到线性变化，那么说明一个三维被强行用二维表示，表示方法类似于投影。<br>这两者目前理解似乎没有多大用。另一个降维，二维转一维（2</em>1–&gt;1*2），一维可以当作是数轴，二维上的向量被压到此数轴上，i与j在一条线上，各指数轴上的一个点，这种思想为点积打好了基础。<br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%9D%9E%E6%96%B9%E9%98%B53.PNG"><br><img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E9%9D%9E%E6%96%B9%E9%98%B54.PNG"><br>摘自up主婆婆盯<br>加油！</p>
]]></content>
      <tags>
        <tag>代数</tag>
      </tags>
  </entry>
  <entry>
    <title>行列式</title>
    <url>/2022/02/13/%E8%A1%8C%E5%88%97%E5%BC%8F/</url>
    <content><![CDATA[<p>备忘录：<br>来记一记行列式，在看过行列式的变化之后，光确定一个向量的位置还不够过瘾，这次来试试判断变化的面积，还是由基向量开始，det（i,j）= det（1，0，0，1）是一个面积为1的小正方形，<br>det（1，0，0，2）好我们把i拉长了到2，现在是个长为2宽为1的长方形了det（3，0，0，3）好我们把i和j都拉长了，现在是个长为3宽为3的大一点的正方形，完全符合行列式的计算方式是不是？因为小正方形的面积为1，我们也可以这样理解:把小正方形拽来拽去，使其变为原来的常常数倍数，倍数就是行列式的值。<br>注意，如果是个不规则的图形，可以被划分为多个小的正方体，分的越小，越接近于这个图形的面积，空间变化时所有的小正方形也会跟着变化，仍然能够很好的表示变化后图形的面积，并且面积不是把两个向量相连，而是两者平移相连的部分，例如，（1，0，1，1）不是一个三角形，而是一个平行四边形<img src="https://raw.githubusercontent.com/This-is-Xm/pic/master/img/%E8%A1%8C%E5%88%97%E5%BC%8F1.PNG"></p>
<p>继续进化，如何理解行列式数值为0呢，对，就是你想的那样，你把正方形拍扁了，面降维到一条线甚至是一个点了，面积自然是0了。那如果是负数呢？让我们想象下有一张白纸，你在上面画个正方形，现在你把这张纸翻个面，哎！还是那个正方形，向量的方向全部反过来了，这是这个正方形的“背面”，也就是分列式负数的情况，面积相同（绝对值相等）<br>三维的呢，多一个基向量z，det(i,j,z)是一个长宽高都为1的立方体，求的是正方体的体积，变化就是对这个正方体压缩和拉伸，他也同样可以为0，拍扁成一个面，搓一条线，坍缩一个点，都是体积为0了。<br>摘自up主婆婆町<br>加油！</p>
]]></content>
      <tags>
        <tag>代数</tag>
      </tags>
  </entry>
</search>
