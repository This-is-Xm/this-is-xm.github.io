<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>新年快乐</title>
    <url>/2022/01/20/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<hr>
<p>摘要</p>
<span id="more"></span>
<p>来一个长——————————长————————————的分割线</p>
<p>徐墨：哎嘿嘿，代码来咯， 哎，这这，这代码都齐了，怎么还不用啊?<br>A：老徐，大伙都不敢用，有人说，说是操作太复杂了<br>徐墨：哎呦呦，你这人就爱开玩笑，快趁热用吧，我不打扰，我走了<br>B:你不能走<br>徐墨：0.0<br>徐墨：tnnd，为什么不用！不用是吧，好———————————那我打个包给你们吧QAQ</p>
<p>以下是打包文件链接(环境我内置好了，点击exe文件可以直接用，无需下载python)：<br>链接: <a href="https://pan.baidu.com/s/1TYxhUgQP-C9tnAHzMwm9tg?pwd=hucu">https://pan.baidu.com/s/1TYxhUgQP-C9tnAHzMwm9tg?pwd=hucu</a> 提取码: hucu</p>
]]></content>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>测试页</title>
    <url>/2021/12/23/%E6%B5%8B%E8%AF%95%E9%A1%B5/</url>
    <content><![CDATA[<hr>
<p>摘要</p>
<span id="more"></span>
<p>来个动态链表的个人理解好了。\n</p>
<p>#define _CRT_SECURE_NO_WARNINGS 1<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;string.h&gt;<br>struct student<br>{<br>    int num;<br>    int grade;<br>    struct student* next;<br>};<br>struct student* creat()<br>{<br>    int n;<br>    struct student* head;//首先，做一个头文件。<br>    struct student* p1, * p2;//然后，做两个连接工具<br>    n = 0;<br>    p1 = p2 = (struct student*)malloc(sizeof(struct student));//结构体自身不占空间，所以需要开空间，p1p2同时指向head结构体<br>    printf(“以学生&quot;学号，成绩&quot;格式输入（0为结束）：\n”);<br>    scanf(“ % ld, % f”, &amp;p1-&gt;num, &amp;p1-&gt;grade);//输入，储存<br>    head = NULL;//头文件初始化<br>    while (p1-&gt;num != 0)//开始创建结构体（head结构体已经存在了，所以从p1开始，是第二个结构体）<br>    {<br>        n = n + 1;<br>        if (n == 1)<br>            head = p1;//第二个创建的结构体与头文件结构体链接<br>        else<br>            p2-&gt;next = p1;//第三个及以上，p1的首地址赋予给了p2所在的结构体中的next，所以该结构体读取next时等同于读取此时p1的结构体地址<br>        p2 = p1;//此时p2位于p1相同的结构体（其实就是p2往后指了一个结构体）<br>        p1 = (struct student*)malloc(sizeof(struct student));//然后p1再创建个新的结构体，并且指向它，这样就又可以执行p2-&gt;next = p1<br>        scanf(“%d,%d”,&amp;p1-&gt;num, &amp;p1-&gt;grade);<br>    }<br>    p2 -&gt; next = NULL;//最后一个结构体指向NULL代表结束<br>    return head;//返回head结构体首地址，这样输出就可以从head开始一直往后延续。<br>}<br>void putout(struct student* head)//输出<br>{<br>    struct student* p,<em>p1;//每个自定义函数都是独立的，这和创建里的p1不同噢。<br>    p1 = (head);<br>    p = p1-&gt;next;//由于头文件只是充当开始的结构体，内容都是随机数，所以输出时把它跳过，从第二个有数值的结构体开始输出<br>    int n = 0;//这个主要是统计学生个数的，可有可无<br>    printf(“\n”);<br>    if (head != NULL)<br>    {<br>        do {<br>            printf(“编号：%d,成绩：%d\n”, p-&gt;num, p-&gt;grade);<br>            p = p-&gt;next;//指针p不断后移，输出，后移，输出，直到结构体全部输出完<br>            n++;<br>        } while (p != NULL);<br>    }<br>    else<br>        return(head);<br>    printf(“\n现在有%d个学生信息”, n);<br>}<br>int main()<br>{<br>    struct student</em> p;//声明一个结构体指针来存放创建函数里出来的head结构体首地址<br>    p =  creat();<br>    putout(p);//然后放进输出函数让它打印出来<br>    free(p);//释放，省点空间，可有可无。<br>    system(“pause”);//暂停，防止系统崩溃，可有可无。<br>}</p>
]]></content>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵线性变换理解</title>
    <url>/2022/02/12/%E7%9F%A9%E9%98%B5%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>备忘录：<br>首先线性变换的特点为：1.原点不发生变化 2.变化后直线（除了直观的横坐标和纵坐标，斜线如对角线也包括在内）<br>线性变化个人理解为二维空间上对空间的变化，具体表现在向量的拉伸和方向的改变，“变化”，是暗示空间上的动态变化<br><a href="https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/bianhua1.PNG">https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/bianhua1.PNG</a><br><a href="https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/bianhua2.PNG">https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/bianhua2.PNG</a><br><a href="https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/bianhua3.PNG">https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/bianhua3.PNG</a><br>然后，我们要如何捕获到变化后某个向量的位置，或者说，一个向量在线性变化后，应该如何表示。<br>这个时候我们就用上了基向量，即i(1,0)和j(0,1)。我们知道，在变化前二维向量中，他们的拉伸可以表示该平面内任何一个向量{比如有向量a =（-1.2）=   (-1)j【反方向拉伸原长度】+ 2i【把i拉长为原来两倍】}，也可以说，每个向量与基向量都有相关性<br>再换个角度看，（2，-1）其实是基到向量a的一种方法，在线性变量时，这个方法仍旧没变。这时给你一个2x2的矩阵，比如[1，-2，3，0]，实际是记录变化后的两个基向量i（1，-2）和j（3，0），向量a现在在哪？<br>a= [-1*  1 +2*3] = [5]   那么a在变化后的向量表示为(5,2)<br>   [3 <em>(-2)+3</em>0] = [2]<br><a href="https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/%E5%8F%98%E5%8C%96.PNG">https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/变化.PNG</a><br>现在，来普遍化！<br><a href="https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/%E7%BB%93%E8%AE%BA.PNG">https://cdn.jsdelivr.net/gh/This-is-Xm/pic/img/结论.PNG</a><br>补充一个特殊变化：如果i和j在线性变化后两者有线性关系（倍数关系），如(2,1)和（-2，-1），相当于把空间压缩成一条线（降维）<br>总结：线性变化是一种操纵空间的手段，矩阵可以被看作空间变换的语言，你可以从一个已知矩阵，得出一个被变形后的空间，是空间的一种特定变换</p>
]]></content>
      <tags>
        <tag>代数</tag>
      </tags>
  </entry>
</search>
